import java.awt.Color
import java.awt.image.BufferedImage
import java.io.File
import javax.imageio.ImageIO
import kotlin.io.path.createTempFile

private const val tileSize = 11

private val tiles = mapOf(
    '*' to """
        ...........
        .*...*...*.
        ..*..*..*..
        ...*.*.*...
        ....***....
        .*********.
        ....***....
        ...*.*.*...
        ..*..*..*..
        .*...*...*.
        ...........
        """,
    '#' to """
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        """,
    'g' to """
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        ***********
        """,
    ' ' to """
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        """,
    '.' to """
        ...........
        ...........
        ...........
        ...........
        ...........
        .....*.....
        ...........
        ...........
        ...........
        ...........
        ...........
        """,
    'd' to """
        ...........
        ...........
        .....*.....
        ....***....
        ...*****...
        ..*******..
        ...*****...
        ....***....
        .....*.....
        ...........
        ...........
        """,
    'L' to """
        ....***....
        ....***....
        ....***....
        ....***....
        ....*******
        ....*******
        ....*******
        ...........
        ...........
        ...........
        ...........
        """,
    '7' to """
        ...........
        ...........
        ...........
        ...........
        *******....
        *******....
        *******....
        ....***....
        ....***....
        ....***....
        ....***....
        """,
    'S' to """
        ...........
        ...........
        ...........
        ...........
        ....*******
        ....*******
        ....*******
        ....***....
        ....***....
        ....***....
        ....***....
        """,
    'F' to """
        ...........
        ...........
        ...........
        ...........
        ....*******
        ....*******
        ....*******
        ....***....
        ....***....
        ....***....
        ....***....
        """,
    'J' to """
        ....***....
        ....***....
        ....***....
        ....***....
        *******....
        *******....
        *******....
        ...........
        ...........
        ...........
        ...........
        """,
    '-' to """
        ...........
        ...........
        ...........
        ...........
        ***********
        ***********
        ***********
        ...........
        ...........
        ...........
        ...........
        """,
    '|' to """
        ....***....
        ....***....
        ....***....
        ....***....
        ....***....
        ....***....
        ....***....
        ....***....
        ....***....
        ....***....
        ....***....
        """,
    '+' to """
        ....***....
        ....***....
        ....***....
        ....***....
        ***********
        ***********
        ***********
        ....***....
        ....***....
        ....***....
        ....***....
        """,
    ' ' to """
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        ...........
        """,
    '/' to """
        ..........*
        .........*.
        ........*..
        .......*...
        ......*....
        .....*.....
        ....*......
        ...*.......
        ..*........
        .*.........
        *..........
        """,
    '\\' to """
        *..........
        .*.........
        ..*........
        ...*.......
        ....*......
        .....*.....
        ......*....
        .......*...
        ........*..
        .........*.
        ..........*
        """,
    '1' to """
        ...........
        ...........
        ....**.....
        ...*.*.....
        ..*..*.....
        .....*.....
        .....*.....
        .....*.....
        .....*.....
        ...*****...
        ...........
        """,
    '2' to """
        ...........
        ...........
        ....****...
        ...*....*..
        ..*....*...
        ......*....
        .....*.....
        ....*......
        ...*.......
        ..*******..
        ...........
        """,
    '3' to """
        ...........
        ...........
        ....***....
        ...*...*...
        ........*..
        ........*..
        ....****...
        ........*..
        ...*....*..
        ....****...
        ...........
        """,
    '4' to """
        ...........
        ...........
        .......*...
        ......*....
        .....*.....
        ....*......
        ...*..*....
        ..*******..
        ......*....
        ......*....
        ...........
        """,
    '5' to """
        ...........
        ...........
        ...******..
        ...*.......
        ...*.......
        ...****....
        .......*...
        ........*..
        ..*....*...
        ...****....
        ...........
        """,
    '6' to """
        ...........
        ...........
        ...*****...
        ..*.....*..
        ..*.....*..
        ..*........
        ..******...
        ..*.....*..
        ..*.....*..
        ...*****...
        ...........
        """,
    '7' to """
        ...........
        ...........
        ..*******..
        ........*..
        .......*...
        ......*....
        .....*.....
        ....*......
        ...*.......
        ..*........
        ...........
        """,
    '8' to """
        ...........
        ...........
        ...*****...
        ..*.....*..
        ..*.....*..
        ...*****...
        ..*.....*..
        ..*.....*..
        ..*.....*..
        ...*****...
        ...........
        """,
    '9' to """
        ...........
        ...........
        ...*****...
        ..*....**..
        ..*....**..
        ...****.*..
        ........*..
        ........*..
        ..*....*...
        ...****....
        ...........
        """,
    '0' to """
        ...........
        ...........
        ....***....
        ...*...*...
        ..*.....*..
        ..*.....*..
        ..*.....*..
        ..*.....*..
        ...*...*...
        ....***....
        ...........
        """,
).mapValues { toBufferedImage(it.key, it.value) }

private fun toBufferedImage(char: Char, data: String): BufferedImage {
    val charImage = BufferedImage(tileSize, tileSize, BufferedImage.TYPE_INT_ARGB)
    val dot = Color.YELLOW.rgb
    val star = when (char) {
        'b' -> Color.BLACK.rgb
        'w' -> Color.WHITE.rgb
        'g' -> Color.GREEN.rgb
        else -> Color.RED.rgb
    }
    data.trimIndent().lines().forEachIndexed { y, line ->
        line.forEachIndexed { x, c ->
            when (c) {
                '.' -> charImage.setRGB(x, y, dot)
                '*' -> charImage.setRGB(x, y, star)
            }
        }
    }
    return charImage
}

fun showPng(area: CharArea) {
    val out = createTempFile().toFile()
    toPng(area, out)
    ProcessBuilder("loupe", out.path).start().waitFor()
    out.delete()
}

fun toPng(area: CharArea, output: File) {
    val image = BufferedImage(
        (area.xRange.endInclusive + 1) * tileSize,
        (area.yRange.endInclusive + 1) * tileSize,
        BufferedImage.TYPE_INT_ARGB
    )
    val graphics = image.graphics

    area.tiles().forEach { p ->
        tiles[area[p]]?.let { graphics.drawImage(it, p.x * tileSize, p.y * tileSize, null) }
    }

    ImageIO.write(image, "png", output)
}
